---
- name: preparation for openshift installation
  hosts: all
  remote_user: root
  vars:
    - openshift_ver: 311
    - plan: ALLINONE


  tasks:
    - name: Create /root/.ssh
      file:
        path: /root/.ssh
        mode: 0700
        owner: root
        group: root
        state: directory
      when: inventory_hostname in groups['masters']

    - name: ssh login parameter
      copy:
        content: |
          Host *
            StrictHostKeyChecking no
        dest: /root/.ssh/config
      when: inventory_hostname in groups['masters']

    - name: config vim for yaml
      copy:
        content: "autocmd FileType yaml setlocal ai ts=2 sw=2 et"
        dest: /root/.vimrc
      when: inventory_hostname in groups['masters']

    - name: copy supplier's ssh private key to all hosts
      copy:
        src: /root/.ssh/id_rsa
        dest: /root/.ssh/id_rsa
        mode: 0600
        owner: root
        group: root

    - name: copy supplier's ssh public key to all hosts
      copy:
        src: /root/.ssh/id_rsa.pub
        dest: /root/.ssh/id_rsa.pub
        mode: 0644
        owner: root
        group: root

    - name: Deploy ssh key to root at all nodes
      authorized_key:
        user: root
        key: "{{ lookup('file', '/root/.ssh/id_rsa.pub') }}"

    - name: stop and disable firewalld
      service:
        name: firewalld
        state: stopped
        enabled: no

    - name: enable Selinux
      lineinfile:
        path: /etc/selinux/config
        regexp: '^SELINUX='
        line: 'SELINUX=enforcing'

    - name: Modify sshd configuration file
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^GSSAPIAuthentication'
        line: 'GSSAPIAuthentication no'

    - name: Modify sshd configuration file2
      lineinfile:
        path: /etc/ssh/sshd_config
        line: 'UseDNS no'

    - name: install supporting package
      yum:
        name:
          - epel-release
          - centos-release-openshift-origin{{ openshift_ver }}
          - wget
          - git
          - net-tools
          - bind-utils
          - iptables-services
          - bridge-utils
          - bash-completion
          - kexec-tools
          - docker
        state: latest
    - name: Install Openshift tools
      yum:
        name: 
          #- ./ansible-2.6.5-1.el7.ans.noarch.rpm
          - openshift-ansible*
        state: present
      when: inventory_hostname in groups['masters']
    
    - name: customize docker-storage-setup file
      copy:
        content: |
          DEVS=/dev/sdb
          VG=docker-vg
          SETUP_LVM_THIN_POOL=yes
        dest: /etc/sysconfig/docker-storage-setup
        backup: yes

    - name: verify existence of docker storage pool
      stat:
        path: /dev/docker-vg/docker-pool
      register: docker_vg_status

    - name: Run docker-storage-setup
      command: /usr/bin/docker-storage-setup
      when: docker_vg_status.stat.islnk is not defined

    - name: Start and enable docker
      service:
        name: docker
        state: started
        enabled: true
    
    - name: Copy openshift ansible hosts to master
      copy:
        src: oc-preinstall-files/hosts-{{ openshift_ver }}-{{ plan }}
        dest: /etc/ansible/hosts
        backup: yes
      ignore_errors: yes
      when: inventory_hostname in groups['masters']

    - name: copy admin password file to master
      copy:
        src: oc-preinstall-files/openshift-passwd
        dest: /root/
      when: inventory_hostname in groups['masters']

    - name: Create the first setup script
      copy:
        content: "#!/bin/bash \n ansible-playbook /usr/share/ansible/openshift-ansible/playbooks/prerequisites.yml"
        dest: /root/first.sh
        mode: 0755
      when: inventory_hostname in groups['masters']

    - name: Create the second setup script
      copy:
        content: |
          #!/bin/bash
          sed -i 's/mirror.centos.org/mirrors.aliyun.com/g' /etc/yum.repos.d/CentOS-OpenShift-Origin*
          yum makecache
          ansible-playbook /usr/share/ansible/openshift-ansible/playbooks/deploy_cluster.yml
        dest: /root/second.sh
        mode: 0755
      when: inventory_hostname in groups['masters']

    - name: enable ansible log
      lineinfile:
        path: /etc/ansible/ansible.cfg
        regexp: '^#log_path'
        line: 'log_path = /var/log/ansible.log'
        backup: yes
      when: inventory_hostname in groups['masters']



  handlers:
    - name: restart_sshd
      service:
        name: sshd
        state: restarted
